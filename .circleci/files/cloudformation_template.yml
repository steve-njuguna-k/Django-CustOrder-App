# This AWS CloudFormation template is written in YAML format.
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  SECRETKEY:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'secretkey'
    Description: Django Secret Key
  DEBUG:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'debug'
    Description: Django Debug Status
  ALLOWEDHOSTS:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'allowedhosts'
    Description: Django Allowed Hosts
  ATAPIKEY:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'atapikey'
    Description: AfricasTalking API Key
  ATUSERNAME:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'atusername'
    Description: AfricasTalking Username
  ATSMSSHORTCODE:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'atsmsshortcode'
    Description: AfricasTalking SMS Shortcode
  DBENGINE:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'dbengine'
    Description: Django DB Engine
  DBNAME:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'dbname'
    Description: Django DB Name
  DBUSER:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'dbuser'
    Description: Django DB User
  DBPASSWORD:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'dbpassword'
    Description: Django DB Password
  DBHOST:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'dbhost'
    Description: Django DB Host
  DBPORT:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'dbport'
    Description: Django DB Port
  DJANGOSUPERUSERUSERNAME:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'djangosuperuserusername'
    Description: Django SuperUser Username
  DJANGOSUPERUSEREMAIL:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'djangosuperuseremail'
    Description: Django SuperUser Email
  DJANGOSUPERUSERPASSWORD:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'djangosuperuserpassword'
    Description: Django SuperUser Password
  DOCKERHUBUSERNAME:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'dockerhubusername'
    Description: DockerHub Username
  DOCKERHUBPASS:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'dockerhubpass'
    Description: DockerHub Password

# Define AWS resources
Resources:

  # Create a Virtual Private Cloud (VPC)
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: CO

  # Create an Internet Gateway and attach it to the VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CO

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  # Create a public route table for the VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: CO | Public

  # Create a default route in the public route table for Internet access
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Create a subnet for the database server with public IP assignment
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: CO-Server

  # Associate the database subnet with the public route table
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet

  # Create a security group for the database server to control inbound traffic
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySQL security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: CO-Server

  # Create an EC2 instance for the database server
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: COKeyPair
      ImageId: ami-0261755bbcb8c4a84
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      SubnetId: !Ref Subnet

      # User data script to configure the instance on launch
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash

          # Append environment variable exports for Django and other settings.
          # These settings are injected from the CircleCI env variables.
          echo "SECRET_KEY=${SECRETKEY}" >> /etc/environment
          echo "DEBUG=${DEBUG}" >> /etc/environment
          echo "ALLOWED_HOSTS=${ALLOWEDHOSTS}" >> /etc/environment
          echo "AT_API_KEY=${ATAPIKEY}" >> /etc/environment
          echo "AT_USERNAME=${ATUSERNAME}" >> /etc/environment
          echo "AT_SMS_SHORTCODE=${ATSMSSHORTCODE}" >> /etc/environment
          echo "DB_ENGINE=${DBENGINE}" >> /etc/environment
          echo "DB_NAME=${DBNAME}" >> /etc/environment
          echo "DB_USER=${DBUSER}" >> /etc/environment
          echo "DB_PASSWORD=${DBPASSWORD}" >> /etc/environment
          echo "DB_HOST=${DBHOST}" >> /etc/environment
          echo "DJANGO_SUPERUSER_USERNAME=${DJANGOSUPERUSERUSERNAME}" >> /etc/environment
          echo "DJANGO_SUPERUSER_EMAIL=${DJANGOSUPERUSEREMAIL}" >> /etc/environment
          echo "DJANGO_SUPERUSER_PASSWORD=${DJANGOSUPERUSERPASSWORD}" >> /etc/environment
          echo "DOCKERHUB_USERNAME=${DOCKERHUBUSERNAME}" >> /etc/environment
          echo "DOCKERHUB_PASS=${DOCKERHUBPASS}" >> /etc/environment

          # Export environment variables in the user's bash profile.
          echo "export SECRET_KEY=${SECRETKEY}" >> /home/ubuntu/.bashrc
          echo "export DEBUG=${DEBUG}" >> /home/ubuntu/.bashrc
          echo "export ALLOWED_HOSTS=${ALLOWEDHOSTS}" >> /home/ubuntu/.bashrc
          echo "export AT_API_KEY=${ATAPIKEY}" >> /home/ubuntu/.bashrc
          echo "export AT_USERNAME=${ATUSERNAME}" >> /home/ubuntu/.bashrc
          echo "export AT_SMS_SHORTCODE=${ATSMSSHORTCODE}" >> /home/ubuntu/.bashrc
          echo "export DB_ENGINE=${DBENGINE}" >> /home/ubuntu/.bashrc
          echo "export DB_NAME=${DBNAME}" >> /home/ubuntu/.bashrc
          echo "export DB_USER=${DBUSER}" >> /home/ubuntu/.bashrc
          echo "export DB_PASSWORD=${DBPASSWORD}" >> /home/ubuntu/.bashrc
          echo "export DB_HOST=${DBHOST}" >> /home/ubuntu/.bashrc
          echo "export DJANGO_SUPERUSER_USERNAME=${DJANGOSUPERUSERUSERNAME}" >> /home/ubuntu/.bashrc
          echo "export DJANGO_SUPERUSER_EMAIL=${DJANGOSUPERUSEREMAIL}" >> /home/ubuntu/.bashrc
          echo "export DJANGO_SUPERUSER_PASSWORD=${DJANGOSUPERUSERPASSWORD}" >> /home/ubuntu/.bashrc
          echo "export DOCKERHUB_USERNAME=${DOCKERHUBUSERNAME}" >> /home/ubuntu/.bashrc
          echo "export DOCKERHUB_PASS=${DOCKERHUBPASS}" >> /home/ubuntu/.bashrc

          # You can also source the .bashrc file to apply the changes immediately
          source /etc/environment
          source /home/ubuntu/.bashrc

          sudo apt install unzip
          sudo snap install docker
          sudo systemctl enanble docker

          cd /home/ubuntu/
          mkdir App

          sudo wget https://github.com/steve-njuguna-k/Django-CustOrder-App/archive/refs/heads/master.zip -P App/
          cd App/
          sudo unzip master.zip
          sudo rm -rf master.zip

          cd Django-CustOrder-App-master/

          sudo touch .env
          echo "SECRET_KEY=${SECRETKEY}" >> .env
          echo "DEBUG=${DEBUG}" >> .env
          echo "ALLOWED_HOSTS=${ALLOWEDHOSTS}" >> .env
          echo "AT_API_KEY=${ATAPIKEY}" >> .env
          echo "AT_USERNAME=${ATUSERNAME}" >> .env
          echo "AT_SMS_SHORTCODE=${ATSMSSHORTCODE}" >> .env
          echo "DB_ENGINE=${DBENGINE}" >> .env
          echo "DB_NAME=${DBNAME}" >> .env
          echo "DB_USER=${DBUSER}" >> .env
          echo "DB_PASSWORD=${DBPASSWORD}" >> .env
          echo "DB_HOST=${DBHOST}" >> .env
          echo "DJANGO_SUPERUSER_USERNAME=${DJANGOSUPERUSERUSERNAME}" >> .env
          echo "DJANGO_SUPERUSER_EMAIL=${DJANGOSUPERUSEREMAIL}" >> .env
          echo "DJANGO_SUPERUSER_PASSWORD=${DJANGOSUPERUSERPASSWORD}" >> .env
          echo "DOCKERHUB_USERNAME=${DOCKERHUBUSERNAME}" >> .env
          echo "DOCKERHUB_PASS=${DOCKERHUBPASS}" >> .env

          source .env

          export DOCKERHUB_USERNAME="$DOCKERHUBUSERNAME"
          export DOCKERHUB_PASS="$DOCKERHUBPASS"

          echo $DOCKERHUB_PASS | sudo docker login --username $DOCKERHUB_USERNAME --password-stdin
          sudo docker-compose -f docker-compose-prod.yml up -d --build
      Tags:
        - Key: Name
          Value: CO-Server

# Define outputs for the CloudFormation stack
Outputs:

  # Output the public IP address of the database EC2 instance
  PublicIP:
    Description: Public IP address of the database EC2 instance
    Value: !GetAtt Instance.PublicIp
