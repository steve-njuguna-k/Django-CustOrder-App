AWSTemplateFormatVersion: '2010-09-09'
Description: Template for creating an Amazon VPC and EC2 instance for CustOrder App

# Define AWS CloudFormation resources to create the VPC and EC2 instance
Resources:
  # Create the VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Specifies an Elastic IP (EIP) address
  MyEIP:
    Type: "AWS::EC2::EIP"

  # Create an Internet Gateway and attach it to the VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Create a security group for EC2 instance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
  
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub CustOrder Public Subnet (AZ1)
      VpcId: !Ref MyVPC

  # Create a private subnet within the VPC
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags: 
        - Key: Name
          Value: !Sub CustOrder Private Subnet (AZ1)
      VpcId: !Ref MyVPC

  # Create an EC2 instance within the private subnet
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          export SECRET_KEY=$SECRET_KEY
          export DEBUG=$DEBUG
          export ALLOWED_HOSTS=$ALLOWED_HOSTS
          export AT_API_KEY=$AT_API_KEY
          export AT_USERNAME=$AT_USERNAME
          export DB_ENGINE=$DB_ENGINE
          export DB_NAME=$DB_NAME
          export DB_USER=$DB_USER
          export DB_PASSWORD=$DB_PASSWORD
          export DB_HOST=$DB_HOST
          export DB_PORT=$DB_PORT
          export DJANGO_SUPERUSER_USERNAME=$DJANGO_SUPERUSER_USERNAME
          export DJANGO_SUPERUSER_EMAIL=$DJANGO_SUPERUSER_EMAIL
          export DJANGO_SUPERUSER_PASSWORD=$DJANGO_SUPERUSER_PASSWORD
          export DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME
          export DOCKERHUB_PASS=$DOCKERHUB_PASS

          sudo apt install unzip
          sudo snap install docker
          mkdir App
          wget https://github.com/steve-njuguna-k/Django-CustOrder-App/archive/refs/heads/master.zip -P App/
          sudo unzip App/master.zip
          rm -rf App/master.zip

          cd App/Django-CustOrder-App-master
          sudo docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASS
          sudo docker-compose -f docker-compose-prod.yml up -d --build
          
      InstanceType: t3.micro
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      ImageId: ami-053b0d53c279acc90
      KeyName: SteveKeyPair
      Tags:
        - Key: Name
          Value: CustOrder-Server
  
  # Associate the Elastic IP (EIP) address with an EC2 instance
  EIPAssociation:
    Type: "AWS::EC2::EIPAssociation"
    Properties:
      InstanceId: !Ref MyEC2Instance
      EIP: !Ref MyEIP

# Define Outputs to retrieve information about the created resources
Outputs:
  # Output the ID of the created EC2 instance
  EC2InstanceId:
    Description: ID of the created EC2 instance
    Value: !Ref MyEC2Instance
