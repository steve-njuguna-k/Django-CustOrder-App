# This AWS CloudFormation template is written in YAML format.
AWSTemplateFormatVersion: 2010-09-09

# Define AWS resources
Resources:

  # Create a Virtual Private Cloud (VPC)
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: false
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: CO

  # Create an Internet Gateway and attach it to the VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CO

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  # Create a public route table for the VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: CO | Public

  # Create a default route in the public route table for Internet access
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Create a subnet for the database server with public IP assignment
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: CO-Server

  # Associate the database subnet with the public route table
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet

  # Create a security group for the database server to control inbound traffic
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySQL security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
        - Key: Name
          Value: CO-Server

  # Create an EC2 instance for the database server
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: COKeyPair
      ImageId: ami-0261755bbcb8c4a84
      InstanceType: t2.micro
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      SubnetId: !Ref Subnet

      # User data script to configure the instance on launch
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash

          # Append environment variable exports
          echo "SECRET_KEY=$SECRET_KEY" >> /etc/environment
          echo "DEBUG=$DEBUG" >> /etc/environment
          echo "ALLOWED_HOSTS=$ALLOWED_HOSTS" >> /etc/environment
          echo "AT_API_KEY=$AT_API_KEY" >> /etc/environment
          echo "AT_USERNAME=$AT_USERNAME" >> /etc/environment
          echo "AT_SMS_SHORTCODE=$AT_SMS_SHORTCODE" >> /etc/environment
          echo "DB_ENGINE=$DB_ENGINE" >> /etc/environment
          echo "DB_NAME=$DB_NAME" >> /etc/environment
          echo "DB_USER=$DB_USER" >> /etc/environment
          echo "DB_PASSWORD=$DB_PASSWORD" >> /etc/environment
          echo "DB_HOST=$DB_HOST" >> /etc/environment
          echo "DJANGO_SUPERUSER_USERNAME=$DJANGO_SUPERUSER_USERNAME" >> /etc/environment
          echo "DJANGO_SUPERUSER_EMAIL=$DJANGO_SUPERUSER_EMAIL" >> /etc/environment
          echo "DJANGO_SUPERUSER_PASSWORD=$DJANGO_SUPERUSER_PASSWORD" >> /etc/environment
          echo "DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> /etc/environment
          echo "DOCKERHUB_PASS=$DOCKERHUB_PASS" >> /etc/environment

          echo "export SECRET_KEY=$SECRET_KEY" >> /home/ubuntu/.bashrc
          echo "export DEBUG=$DEBUG" >> /home/ubuntu/.bashrc
          echo "export ALLOWED_HOSTS=$ALLOWED_HOSTS" >> /home/ubuntu/.bashrc
          echo "export AT_API_KEY=$AT_API_KEY" >> /home/ubuntu/.bashrc
          echo "export AT_USERNAME=$AT_USERNAME" >> /home/ubuntu/.bashrc
          echo "export AT_SMS_SHORTCODE=$AT_SMS_SHORTCODE" >> /home/ubuntu/.bashrc
          echo "export DB_ENGINE=$DB_ENGINE" >> /home/ubuntu/.bashrc
          echo "export DB_NAME=$DB_NAME" >> /home/ubuntu/.bashrc
          echo "export DB_USER=$DB_USER" >> /home/ubuntu/.bashrc
          echo "export DB_PASSWORD=$DB_PASSWORD" >> /home/ubuntu/.bashrc
          echo "export DB_HOST=$DB_HOST" >> /home/ubuntu/.bashrc
          echo "export DJANGO_SUPERUSER_USERNAME=$DJANGO_SUPERUSER_USERNAME" >> /home/ubuntu/.bashrc
          echo "export DJANGO_SUPERUSER_EMAIL=$DJANGO_SUPERUSER_EMAIL" >> /home/ubuntu/.bashrc
          echo "export DJANGO_SUPERUSER_PASSWORD=$DJANGO_SUPERUSER_PASSWORD" >> /home/ubuntu/.bashrc
          echo "export DOCKERHUB_USERNAME=$DOCKERHUB_USERNAME" >> /home/ubuntu/.bashrc
          echo "export DOCKERHUB_PASS=$DOCKERHUB_PASS" >> /home/ubuntu/.bashrc

          # You can also source the .bashrc file to apply the changes immediately
          source /etc/environment
          source /home/ubuntu/.bashrc

          sudo apt install unzip
          sudo snap install docker
          sudo systemctl enanble docker

          cd /home/ubuntu/
          mkdir App

          sudo wget https://github.com/steve-njuguna-k/Django-CustOrder-App/archive/refs/heads/master.zip -P App/
          cd App/
          sudo unzip master.zip
          sudo rm -rf master.zip

          cd Django-CustOrder-App-master/
          sudo docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASS
          sudo docker-compose -f docker-compose-prod.yml up -d --build

      Tags:
        - Key: Name
          Value: CO-Server

# Define outputs for the CloudFormation stack
Outputs:

  # Output the public IP address of the database EC2 instance
  PublicIP:
    Description: Public IP address of the database EC2 instance
    Value: !GetAtt Instance.PublicIp
